---
# tasks file for config-inactivity-timeout-on-ocp4
- name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Patch OAuth server inactivity timeout'
  command: >
    {{ openshift_cli }} patch oauth cluster --type merge -p '{"spec":{"tokenConfig":{"accessTokenInactivityTimeout": "{{ item.value.timeout }}" }}}'
  when: 
    - item.key == 'oauthserver'
    - item.value['update'] is defined
    - item.value['update'] | bool == true
    - item.value['timeout'] is defined
    - item.value['timeout'] != '' 
  with_dict:
    - "{{ oauthclients_to_update }}"
  register: oauthserver_updated

- name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Patch OAuth server Access max age timeout'
  command: >
    {{ openshift_cli }} patch oauth cluster --type merge -p '{"spec":{"tokenConfig":{"accessTokenMaxAgeSeconds": {{ item.value.maxage | int }} }}}'
  when:
    - item.key == 'oauthserver'
    - item.value['update'] is defined
    - item.value['update'] | bool == true
    - item.value['maxage'] is defined
    - item.value['maxage'] != '' 
  with_dict:
    - "{{ oauthclients_to_update }}"
  register: oauthserver_updated

#- name: '{{ ansible_name_module }} | k8s | Check pod status'
#  when:
#    - oauthserver_updated is defined
#    - oauthserver_updated.rc is defined
#    - oauthserver_updated.rc == '0' 
#  k8s:
#    api_version: config.openshift.io/v1 
#    kind: ClusterOperator
#    name: authentication
#    wait: yes
#    wait_condition:
#      type: ??? 
#      status: True
#    wait_sleep: 10
#    wait_timeout: 10
#  register: oauth_pod_ready
#  until:
#    - oauth_pod_ready.result.status.conditions[0].ready|d(False)|bool
#    #- oauth_pod_ready.result.status.phase == "Running"
#    retries: 20
#    delay: 20
#    changed_when: false

- name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Check authentication clusteroperator status'
  shell: >
    {{ openshift_cli }} get clusteroperators authentication --no-headers | awk '{print $4}' 
  when: 
    - item.key == 'oauthserver'
    - item.value['update'] is defined
    - item.value['update'] | bool == true
  with_dict:
    - "{{ oauthclients_to_update }}"
  register: authco_check

- name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Check kube-apiserver clusteroperator status'
  shell: >
    {{ openshift_cli }} get clusteroperators kube-apiserver --no-headers | awk '{print $4}' 
  when: 
    - item.key == 'oauthserver'
    - item.value['update'] is defined
    - item.value['update'] | bool == true
    - authco_check is defined
    - authco_check.stdout is defined
    - authco_check.stdout | bool == true 
  with_dict:
    - "{{ oauthclients_to_update }}"
  register: kubeco_check

- name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Patch OAuth clients inactivity timeout'
  command: >
    {{ openshift_cli }} patch oauthclient {{ item.value['name'] }} --type merge -p '{"accessTokenInactivityTimeoutSeconds": {{ item.value.timeout | int }} }'
  when: 
    - item.key != 'oauthserver'
    - item.value['update'] is defined
    - item.value['update'] | bool == true
  with_dict:
    - "{{ oauthclients_to_update }}"
  register: oauthclient_updated

  ### a catch all to set inactivity timeout for all oauth clients for which we don't have config
- name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Retrieve all oauth clients'
  shell: >
     {{ openshift_cli }}  get oauthclient --no-headers | awk '{print $1}'
  register: oauthclients

- name: '{{ ansible_name_module }} | command:{{ openshift_cli }} | Patch OAuth clients inactivity timeout'
  command: >
    {{ openshift_cli }} patch oauthclient {{ item }} --type merge -p '{"accessTokenInactivityTimeoutSeconds": {{ oauthclients_to_update["console-client"]["timeout"] | int }} }'
  loop: "{{ oauthclients.stdout_lines | list }}"
  when:
    - oauthclients is defined
    - oauthclients.rc is defined
    - oauthclients.rc == 0
    - oauthclients.stdout_lines is defined
    - oauthclients.stdout_lines | length > 0
    - not item in oauthclients_to_update.keys()
